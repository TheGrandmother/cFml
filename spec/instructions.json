{
  "Basic_Ops":{
    "MOV" : {
      "name" : "Move",
      "description" : "Moves a0 to a1. a1 cannot be a numeric constant.",
      "mnemonic" : "MOV",
      "args" : 2,
      "allowed_a0" : ["ref","const","loc"],
      "allowed_a1" : ["ref","loc"]
    },
    "INC" : {
      "name" : "Increment",
      "description" : "Increments a0",
      "mnemonic" : "INC",
      "args" : 1,
      "allowed_a0" : ["ref","loc"]
    },
    "DEC" : {
      "name" : "Decrement",
      "description" : "Decrements a0",
      "mnemonic" : "DEC",
      "args" : 1,
      "allowed_a0" : ["ref","loc"]
    }
  },

  "Binary_Ops":{
    "ADD" : {
      "name" : "Add",
      "description" : "Adds a0 and a1 and stores result on stack.",
      "mnemonic" : "ADD",
      "operation" : "a0 + a1"
    },
    "SUB" : {
      "name" : "Subtract",
      "description" : "Subtracts a1 from a0",
      "mnemonic" : "SUB",
      "operation" : "a0 - a1"
    },
    "MUL" : {
      "name" : "Multiply",
      "description" : "Multiplies a0 and a1",
      "mnemonic" : "MUL",
      "operation" : "a0 * a1"
    },
    "DIV" : {
      "name" : "DIV",
      "description" : "Divides a0 with a1",
      "mnemonic" : "DIV",
      "operation" : "a0 / a1",
      "check" : "a1 != a0",
      "fail_action" : "fprintf(stderr,\"Division by zero\\n\"); E4C_THROW(RuntimeException, NULL)"
    },
    "MOD" : {
      "name" : "MOD",
      "description" : "Performs a0 mod a1. Behaviour not well defined.",
      "mnemonic" : "MOD",
      "operation" : "a0 % a1",
      "check" : "a1 != a0",
      "fail_action" : "fprintf(stderr,\"Mod by zero\\n\"); E4C_THROW(RuntimeException, NULL)"
    },
    "EQL" : {
      "name" : "Equal",
      "description" : "Returns 1 if a0 and a1 are equal.",
      "mnemonic" : "EQL",
      "operation" : "a0 == a1"
    },
    "GRT" : {
      "name" : "Greter than",
      "description" : "Returns 1 if a0 is greater than a1",
      "mnemonic" : "GRT",
      "operation" : "a0 > a1"
    },
    "LES" : {
      "name" : "Less than",
      "description" : "Returns 1 if a0 is less than a1",
      "mnemonic" : "LES",
      "operation" : "a0 < a1"
    },
    "AND" : {
      "name" : "And",
      "description" : "Performs bitwise and on a0 and a1",
      "mnemonic" : "AND",
      "operation" : "a0 & a1"
    },
    "OR" : {
      "name" : "Or",
      "description" : "Performs bitwise or on a0 and a1",
      "mnemonic" : "OR",
      "operation" : "a0 | a1"
    },
    "XOR" : {
      "name" : "Exclusive Or",
      "description" : "Performs bitwise exclusive or on a0 and a1",
      "mnemonic" : "XOR",
      "operation" : "a0 ^ a1"
    },
    "ROT" : {
      "name" : "Rotate",
      "description" : "Performs unsigned left rotation of a0 by a1. If a1 < 0 a0 gets rotated to the right by -a1",
      "mnemonic" : "ROT",
      "operation" : "(a1 > 0) ? a0 << a1 : a0 >> a1"
    }
  },

  "Unary_Ops":{
    "NOT" : {
      "name" : "Negation",
      "description" : "Perform bitwise negation of a0",
      "mnemonic" : "NOT"
    }
  },

  "Control_Ops": {
    "JOO" : {
      "name" : "Jump on one",
      "description" : "Jumps to a0 if stack is 1",
      "mnemonic" : "JOO",
      "args" : 1
    },
    "JOZ" : {
      "name" : "Jump on zero",
      "description" : "Jumps to a0 if stack is 0",
      "mnemonic" : "JOZ",
      "args" : 1
    },
    "SOO" : {
      "name" : "Subroutine jump on 1",
      "description" : "Performs a subroutine jump to a0 if stack is 1",
      "mnemonic" : "SOO",
      "args" : 1
    },
    "SOZ" : {
      "name" : "Subroutine jump on 0",
      "description" : "Performs a subroutine jump to a0 if stack is 0",
      "mnemonic" : "SOZ",
      "args" : 1
    },
    "JMP" : {
      "name" : "Jump",
      "description" : "Jump to a0",
      "mnemonic" : "JMP",
      "args" : 1
    },
    "JSR" : {
      "name" : "Subroutine Jump",
      "description" : "Perform a subroutine jump to a0",
      "mnemonic" : "JSR",
      "args" : 1
    },
    "RET" : {
      "name" : "Return",
      "description" : "Return from subroutine",
      "mnemonic" : "RET",
      "args" : 0
    },
    "HLT" : {
      "name" : "Halt",
      "description" : "Halts the VM",
      "mnemonic" : "HLT",
      "args" : 0
    }
  }
}
